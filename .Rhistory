w_l
w_l <- w_p[,1] %>%
left_join(p_list)
w_l
View(w_p)
w_l <- w_p[,c(1,2)] %>%
left_join(p_list)
View(w_l)
w_l <- w_p[,c(1,2)] %>%
left_join(p_list) %>%
pull(3) %>%
as.list()
s_l <-  s_p[,c(1,2)] %>%
left_join(p_list) %>%
pull(3) %>%
as.list()
s_l
#plot:
#water vs sediment:
venn_list <- list(
Water = w_l,
Sediment = s_l,
PPCP = ppcp_l,
Pesticides = pesticides_l,
Industrial = industrial_l
)
colors = c("#53C6FF", "#C0BDA5", "#95B9D8", "#E2CA6B", "#798276")
venn.diagram(x=venn_list,
fill = colors,
filename = "plots/Venn/venn_w_s.png",
)
#creating the lists
w_l <- as.list(w_p[,1])
w_k_l <- w_p %>%
select(1,2, starts_with("K")) %>%
mutate(across(3:length(.), ~replace_na(., 0))) %>%
filter(rowSums(select(., 3:ncol(.))) != 0) %>%
pull(1) %>%
as.list()
w_a_l <- w_p %>%
select(1,2, starts_with("A")) %>%
mutate(across(3:length(.), ~replace_na(., 0))) %>%
filter(!rowSums(select(., 3:ncol(.))) == 0) %>%
pull(1) %>%
as.list()
s_k_l <- s_p %>%
select(1,2, starts_with("K")) %>%
mutate(across(3:length(.), ~replace_na(., 0))) %>%
filter(!rowSums(select(., 3:ncol(.))) == 0) %>%
pull(1) %>%
as.list()
s_a_l <- s_p %>%
select(1,2, starts_with("A")) %>%
mutate(across(3:length(.), ~replace_na(., 0))) %>%
filter(!rowSums(select(., 3:ncol(.))) == 0) %>%
pull(1) %>%
as.list()
s_l_l <- s_p %>%
select(1,2, starts_with("L")) %>%
mutate(across(3:length(.), ~replace_na(., 0))) %>%
filter(!rowSums(select(., 3:ncol(.))) == 0) %>%
pull(1) %>%
as.list()
#plot:
#water vs sediment:
venn_list <- list(
Water = w_l,
Sediment = s_l)
colors = c("#53C6FF", "#C0BDA5")
venn.diagram(x=venn_list,
fill = colors,
filename = "plots/Venn/venn_w_s.png",
)
library(openxlsx)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(tidyverse)
library(ggpattern)
library(ggpubr)
library(ggpmisc)
library(hrbrthemes)
library(remotes)
library(ECOTOXr)
library(stringdist)
library(purrr)
library(readxl)
library(stringr)
#download_ecotox_data()
Sys.setlocale("LC_TIME", "English")
# Set the folder path containing your Excel files
folder_path <- "C:/Users/owner/OneDrive - huji.ac.il/PhD/projects/taxotox/DSSTox_Feb_2024"
# Get all Excel file names in the folder
excel_files <- list.files(path = folder_path,
pattern = "\\.(xlsx|xls)$",
full.names = TRUE)
# Read all Excel files and store them in a list
all_data <- map(excel_files, ~{
file_name <- basename(.x)
data <- read_excel(.x)
# Add a column to identify the source file if needed
data$source_file <- file_name
return(data)
})
View(all_data)
# Name each dataframe in the list according to the file name
names(all_data) <- basename(excel_files)
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
mutate(CAS = sapply(strsplit(combined_df$IDENTIFIER, "\\|"), function(x) x[1]))
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
mutate(CAS = sapply(strsplit(combined_df$IDENTIFIER, "\\|"), function(x) x[1]))
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data)
View(combined_df)
p_data <- read.xlsx("all_p.xlsx", sheet = 5) %>%
rename("PREFERRED_NAME" = Contaminants)
#finding matches in contaminants names
match_count <- sum(combined_df$PREFERRED_NAME %in% p_data$PREFERRED_NAME)
print(paste("Number of matches:", match_count))
View(p_data)
install.packages("data.table")
library(data.table)
print(paste("Number of matches:", match_count))
#name matches with the users data
p_data <- read.xlsx("all_p.xlsx", sheet = 5) %>%
rename("PREFERRED_NAME" = Contaminants) %>%  #ask the user to change the column name
merge(., combined_df[,c(2,3)])
head(p_data)
#name matches with the users data
p_data <- read.xlsx("all_p.xlsx", sheet = 5) %>%
rename("PREFERRED_NAME" = Contaminants) %>%  #ask the user to change the column name
merge(., combined_df[,c(2,3)]) %>%
relocate(CASRN, .after = PREFERRED_NAME)
#name matches with the users data
p_data <- read.xlsx("all_p.xlsx", sheet = 5) %>%
rename("PREFERRED_NAME" = Contaminants) %>%  #ask the user to change the column name
left_join(., combined_df[,c(2,3)]) %>%
relocate(CASRN, .after = PREFERRED_NAME)
# Convert your dataframes to data.tables
combined_dt <- as.data.table(combined_df)
p_dt <- as.data.table(p_data)
View(combined_dt)
View(combined_dt)
View(combined_dt)
# Create a function for fuzzy matching
fuzzy_match_dt <- function(source_dt, target_dt, match_col, threshold = 0.05) {
# Create a cross join setup
result <- source_dt[, .(source_name = get(match_col))]
# For each name in source, find the best match in target
result[, match_details := {
name <- source_name
distances <- stringdist(name, target_dt[[match_col]], method = "jw")
min_dist <- min(distances)
best_idx <- which.min(distances)
if (min_dist <= threshold) {
list(match = target_dt[[match_col]][best_idx],
distance = min_dist,
matched = TRUE)
} else {
list(match = NA_character_,
distance = min_dist,
matched = FALSE)
}
}, by = source_name]
# Unnest the results
result <- result[, .(
source_name = source_name,
matched_name = match_details[[1]]$match,
distance = match_details[[1]]$distance,
matched = match_details[[1]]$matched
)]
return(result)
}
# Run the fuzzy matching
matches <- fuzzy_match_dt(p_dt, combined_dt, "PREFERRED_NAME")
# Count matches
match_count <- sum(matches$matched)
# Improved fuzzy matching function with NA handling
fuzzy_match_dt <- function(source_dt, target_dt, match_col, threshold = 0.05) {
# Create a result data.table with source names
result <- source_dt[, .(source_name = get(match_col))]
# Process each source name row by row
result[, c("matched_name", "distance", "matched") := {
name <- source_name
# Skip NA values in source
if (is.na(name)) {
list(NA_character_, NA_real_, FALSE)
} else {
# Calculate distances to all target names (excluding NA targets)
valid_targets <- target_dt[[match_col]][!is.na(target_dt[[match_col]])]
# Handle case where there are no valid targets
if (length(valid_targets) == 0) {
list(NA_character_, NA_real_, FALSE)
} else {
distances <- stringdist(name, valid_targets, method = "jw")
# Find the best match if any valid distances exist
if (length(distances) > 0 && !all(is.na(distances))) {
min_dist <- min(distances, na.rm = TRUE)
best_idx <- which.min(distances)
if (!is.na(min_dist) && min_dist <= threshold) {
list(valid_targets[best_idx], min_dist, TRUE)
} else {
list(NA_character_, min_dist, FALSE)
}
} else {
list(NA_character_, NA_real_, FALSE)
}
}
}
}, by = source_name]
return(result)
}
# Try the fixed function
matches <- fuzzy_match_dt(p_dt, combined_dt, "PREFERRED_NAME")
# Count matches
match_count <- sum(matches$matched, na.rm = TRUE)
print(paste("Number of fuzzy matches:", match_count))
# Join to get CAS numbers
result <- p_dt[matches, on = .(PREFERRED_NAME = source_name)]
result <- result[combined_dt[, .(PREFERRED_NAME, CAS)],
on = .(matched_name = PREFERRED_NAME),
nomatch = 0]
View(result)
# Interactive fuzzy matching function with confirmation for uncertain matches
fuzzy_match_interactive <- function(source_dt, target_dt, match_col, threshold = 0.05, confirm_threshold = 0.0) {
# Create a result data.table with source names
result <- source_dt[, .(source_name = get(match_col))]
result[, c("matched_name", "distance", "confirmed") := list(NA_character_, NA_real_, FALSE)]
# Process each source name row by row
for (i in 1:nrow(result)) {
name <- result$source_name[i]
# Skip NA values in source
if (is.na(name)) {
next
}
# Calculate distances to all target names (excluding NA targets)
valid_targets <- target_dt[[match_col]][!is.na(target_dt[[match_col]])]
# Handle case where there are no valid targets
if (length(valid_targets) == 0) {
next
}
distances <- stringdist(name, valid_targets, method = "jw")
# Find the best match if any valid distances exist
if (length(distances) > 0 && !all(is.na(distances))) {
min_dist <- min(distances, na.rm = TRUE)
best_idx <- which.min(distances)
best_match <- valid_targets[best_idx]
if (!is.na(min_dist) && min_dist <= threshold) {
# If the match is perfect or below confirm_threshold, auto-accept
if (min_dist == 0 || min_dist <= confirm_threshold) {
result[i, `:=`(matched_name = best_match, distance = min_dist, confirmed = TRUE)]
} else {
# Ask for confirmation for uncertain matches
cat("\n------------------------------\n")
cat("Source:", name, "\n")
cat("Best match:", best_match, "\n")
cat("Match quality:", round((1 - min_dist) * 100, 1), "%\n")
response <- readline(prompt = "Accept this match? (y/n): ")
if (tolower(response) == "y" || tolower(response) == "yes") {
result[i, `:=`(matched_name = best_match, distance = min_dist, confirmed = TRUE)]
}
}
}
}
}
return(result)
}
# Run the interactive matching
matches <- fuzzy_match_interactive(p_dt, combined_dt, "PREFERRED_NAME",
threshold = 0.05,     # Maximum allowed distance
confirm_threshold = 0.01) # Auto-accept if distance <= 0.01
# Count confirmed matches
match_count <- sum(matches$confirmed, na.rm = TRUE)
print(paste("Number of confirmed fuzzy matches:", match_count))
View(combined_df)
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length()))
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length(.)))
View(combined_df)
#finding matches in contaminants names
match_count <- sum(combined_df$PREFERRED_NAME %in% p_data$PREFERRED_NAME)
match_count
print(match_count)
print("exact matches:" match_count)
print("exact matches:", match_count)
print(past("exact matches:", match_count))
print(past("exact matches:"), match_count)
print(paste("exact matches:", match_count))
# Run the interactive matching
matches <- fuzzy_match_interactive(p_dt, combined_dt, "PREFERRED_NAME",
threshold = 0.05,     # Maximum allowed distance
confirm_threshold = 0.01) # Auto-accept if distance <= 0.01
library(openxlsx)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(tidyverse)
library(ggpattern)
library(ggpubr)
library(ggpmisc)
library(hrbrthemes)
library(remotes)
library(ECOTOXr)
library(stringdist)
library(purrr)
library(readxl)
library(stringr)
library(data.table)
#install.packages("")
#download_ecotox_data()
Sys.setlocale("LC_TIME", "English")
p_list <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/PhD/reports/GreenBasine/CW_nabulus_raw.xlsx")
View(p_list)
GB_P <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/PhD/reports/GreenBasine/CW_nabulus_raw.xlsx")
View(GB_P)
GB <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/PhD/reports/GreenBasine/CW_nabulus_raw.xlsx")
gb_p <- GB %>%
select(1,4,5:20)
View(gb_p)
gb_p <- GB %>%
select(-c(1,4,5:20))
gb_p <- GB %>%
select(1,4,-c(5:20))
gb_p <- GB %>%
select(1,4,-21:length(.))
gb_p <- GB %>%
select(1,4,21:length(.))
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
filter(rowSums(select(3:length(.))), =0)
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
filter(rowSums(select(3:length(.))),0)
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
filter(rowSums(select(3:length(.))), !=0)
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
filter(rowSums(select(3:length(.))) = 0)
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
filter(rowSums(select(3:length(.))) > 0)
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
mutate(across(3:length(.), ~replace_na(., 0))) %>%
filter(rowSums(select(3:length(.))) > 0)
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
mutate(across(3:length(.), ~replace_na(., 0)))
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
mutate(across(3:length(.), ~replace_na(., 0)))
GB <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/PhD/reports/GreenBasine/CW_nabulus_raw.xlsx")
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
mutate(across(3:length(.), ~replace_na(., 0)))
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
as.numeric(select(3:length(.)))
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
as.numeric(select(3:length(.)))
mutate(across(3:length(.), ~replace_na(., 0)))
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
as.numeric(select(3:length(.))) %>%
mutate(across(3:length(.), ~replace_na(., 0)))
gb_p <- GB %>%
select(1,4,21:length(.)) %>%
as.numeric(select(3:length(.))) %>%
mutate(across(3:length(.), ~replace_na(., 0))) %>%
filter(rowSums(select(3:length(.))) > 0)
gb_p <- GB %>%
select(1, 4, 21:ncol(.)) %>%
mutate(across(3:ncol(.), ~as.numeric(.) %>% replace_na(0))) %>%
filter(rowSums(across(3:ncol(.))) > 0)
gb_p <- GB %>%
select(1, 4, 21:ncol(.)) %>%
mutate(across(3:ncol(.), ~as.numeric(.) %>% replace_na(0))) %>%
filter(rowSums(across(3:ncol(.))) > 0) %>%
pivot_longer(cols = 3:length(.), names_to = "Contaminants")
gb_p <- GB %>%
select(1, 4, 21:ncol(.)) %>%
mutate(across(3:ncol(.), ~as.numeric(.) %>% replace_na(0))) %>%
filter(rowSums(across(3:ncol(.))) > 0) %>%
pivot_longer(cols = 3:length(.), names_to = "Contaminants", values_to = "Concentration")
gb_p <- GB %>%
select(1, 4, 21:ncol(.)) %>%
mutate(across(3:ncol(.), ~as.numeric(.) %>% replace_na(0))) %>%
filter(rowSums(across(3:ncol(.))) > 0) %>%
pivot_longer(cols = 3:length(.), names_to = "Contaminants", values_to = "Concentration") %>%
pivot_wider(names_from = c(1,2), values_from = Concentration)
p_list <- gb_p[,1]
View(p_list)
p_list <- as.list(gb_p[,1])
p_list
View(combined_df)
NUKA_data <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/Research/DATA/NKUA_LC_target_list_Dec2021.xlsx")
View(NUKA_data)
head(NUKA_data)
NUKA_data <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/Research/DATA/NKUA_LC_target_list_Dec2021.xlsx") %>%
rename("CAS.Registry.Number", "CAS")
NUKA_data <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/Research/DATA/NKUA_LC_target_list_Dec2021.xlsx") %>%
rename("CAS", "CAS.Registry.Number")
?rename
NUKA_data <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/Research/DATA/NKUA_LC_target_list_Dec2021.xlsx") %>%
rename(., "CAS" = "CAS.Registry.Number")
library(openxlsx)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(tidyverse)
library(ggpattern)
library(ggpubr)
library(ggpmisc)
library(hrbrthemes)
library(remotes)
library(ECOTOXr)
library(stringdist)
library(purrr)
library(readxl)
library(stringr)
library(data.table)
#install.packages("")
#download_ecotox_data()
Sys.setlocale("LC_TIME", "English")
View(combined_dt)
NUKA_data <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/Research/DATA/NKUA_LC_target_list_Dec2021.xlsx") %>%
rename(., "CAS" = CAS.Registry.Number,
"PREFERRED_NAME" = Contaminants)
NUKA_data <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/Research/DATA/NKUA_LC_target_list_Dec2021.xlsx")
View(NUKA_data)
NUKA_data <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/Research/DATA/NKUA_LC_target_list_Dec2021.xlsx") %>%
rename(., "CAS" = CAS.Registry.Number,
"PREFERRED_NAME" = Compound)
View(NUKA_data)
NUKA_p_list <- NUKA_data[,C(1,11)]
NUKA_p_list <- NUKA_data[,c(1,11)]
View(NUKA_p_list)
View(combined_df)
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
pivot_longer(cols = IUPAC_NAME, names_to = PREFERRED_NAME, values_to = CASRS)
combined_df <- bind_rows(all_data)
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length(.))) %>%
pivot_longer(cols = IUPAC_NAME, names_to = PREFERRED_NAME, values_to = CAS)
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length(.)))
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length(.))) %>%
pivot_longer(cols = c(IUPAC_NAME, CASRN), names_to = PREFERRED_NAME, values_FR = CASRN)
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length(.))) %>%
pivot_longer(cols = c(IUPAC_NAME, CASRN), names_to = PREFERRED_NAME, values_to = CASRN)
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length(.))) %>%
pivot_longer(cols = IUPAC_NAME, names_to = PREFERRED_NAME)
DSSTox_p_list <- combined_df %>%
rbind(combined_df[, c("NAME", "CAS")],              # Keep only NAME and CAS from original data
data.frame(NAME = df$IUPAC,          # Add IUPAC values as new NAME entries
CAS = df$CAS))             # Keep the same CAS values
DSSTox_p_list <- combined_df %>%
rbind(combined_df[, c("PREFERRED_NAME", "CASRN")],              # Keep only NAME and CAS from original data
data.frame(PREFERRED_NAME = df$IUPAC,          # Add IUPAC values as new NAME entries
CASRN = PREFERRED_NAME$CASRN))             # Keep the same CAS values
?rbind
DSSTox_p_list <- combined_df %>%
rbind(combined_df[, c("PREFERRED_NAME", "CASRN")],              # Keep only NAME and CAS from original data
data.frame(PREFERRED_NAME = combined_df$IUPAC,          # Add IUPAC values as new NAME entries
CASRN = PREFERRED_NAME$CASRN))             # Keep the same CAS values
DSSTox_p_list
DSSTox_p_list <- combined_df %>%
rbind(combined_df[, c("PREFERRED_NAME", "CASRN")],              # Keep only NAME and CAS from original data
data.frame(PREFERRED_NAME = combined_df$IUPAC,          # Add IUPAC values as new NAME entries
CASRN = PREFERRED_NAME$CASRN))             # Keep the same CAS values
head(combined_df)
DSSTox_p_list <- combined_df %>%
rbind(combined_df[, c("PREFERRED_NAME", "CASRN")],              # Keep only NAME and CAS from original data
data.frame(PREFERRED_NAME = combined_df$IUPAC_NAME,          # Add IUPAC values as new NAME entries
CASRN = PREFERRED_NAME$CASRN))             # Keep the same CAS values
View(combined_df)
DSSTox_p_list
# combine all data into a single dataframe and add a CAS column
combined_df <- bind_rows(all_data) %>%
select(-c(1,4,6:length(.)))
DSSTox_p_list <- combined_df %>%
rbind(combined_df[, c("PREFERRED_NAME", "CASRN")],              # Keep only NAME and CAS from original data
data.frame(PREFERRED_NAME = combined_df$IUPAC_NAME,          # Add IUPAC values as new NAME entries
CASRN = PREFERRED_NAME$CASRN))             # Keep the same CAS values
DSSTox_p_list <- rbind(
combined_df[, c("PREFERRED_NAME", "CASRN")],              # Original data - NAME and CAS only
data.frame(PREFERRED_NAME = combined_df$IUPAC_NAME,       # Add IUPAC values as new NAME entries
CASRN = combined_df$CASRN)                     # Keep the same CAS values
)
View(DSSTox_p_list)
1218248*2
