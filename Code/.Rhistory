legend.position = "none",
legend.background = element_blank(),
legend.key = element_rect(fill = "white")))
(ratio <- ratio_data %>%
ggplot(aes(x = reorder(Contaminants, DSED_R), y = DSED_R, fill = Classification))+
geom_hline(yintercept = 1, color = "red", size = 1.2)+
geom_boxplot()+
facet_wrap(~Estuary, scales = "fixed", ncol =3)+
scale_fill_manual(values = class_palette)+
coord_flip()+
labs(x = element_blank(),
y = "Deep / Sediment concentration ratio") +
theme(aspect.ratio = 1.5,
panel.grid.major = element_line(colour = "lightgray", linetype = "solid"),
panel.grid.minor = element_line(colour = "lightgray", linetype = "longdash"),
panel.border = element_rect(fill = NA, color = "black", size = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(fill = "white", color = "black", linewidth = 1.5, linetype = "solid"),
strip.text = element_text(size = 17, colour = "black",  family = "Times New Roman"),
axis.title.y = element_text(size = 20, family = "Times New Roman"),
axis.title.x = element_text(size = 20, family = "Times New Roman"),
axis.text.y = element_text(size = 9, colour = "black", family = "Times New Roman"),
axis.text.x = element_text(size = 10, colour = "black", family = "Times New Roman"),
legend.text = element_text(size = 15, family = "Times New Roman"),
legend.key.size = unit(1, "cm"),
legend.title = element_blank(),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_rect(fill = "white")))
(ratio <- ratio_data %>%
ggplot(aes(x = reorder(Contaminants, -log_SEDD), y = log_SEDD, fill = Classification))+
geom_hline(yintercept = 1, color = "red", size = 1.2)+
geom_boxplot()+
# facet_wrap(~Estuary, scales = "fixed", ncol =3)+
scale_fill_manual(values = class_palette)+
coord_flip()+
labs(x = element_blank(),
y = "Sediment / Deep Log concentration ratio")+
theme(aspect.ratio = 1.5,
panel.grid.major = element_line(colour = "lightgray", linetype = "solid"),
panel.grid.minor = element_line(colour = "lightgray", linetype = "longdash"),
panel.border = element_rect(fill = NA, color = "black", size = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(fill = "white", color = "black", linewidth = 1.5, linetype = "solid"),
axis.title.y = element_text(size = 20, family = "Times New Roman"),
axis.title.x = element_text(size = 20, family = "Times New Roman"),
axis.text.y = element_text(size = 15, colour = "black", family = "Times New Roman"),
axis.text.x = element_text(size = 15, colour = "black", family = "Times New Roman"),
legend.text = element_text(size = 15, family = "Times New Roman"),
legend.key.size = unit(1, "cm"),
legend.title = element_blank(),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_rect(fill = "white")))
(ratio <- ratio_data %>%
filter(log_DS > 0) %>%
ggplot(aes(x = reorder(Contaminants, log_DS), y = log_DS, fill = Classification))+
geom_hline(yintercept = 0, color = "red", size = 1.2)+
geom_boxplot()+
#facet_wrap(~Estuary, scales = "free_x", ncol =3)+
scale_fill_manual(values = class_palette)+
coord_flip()+
labs(x = element_blank(),
y = "Deep / surface Log concentration ratio")+
theme(aspect.ratio = 1.5,
panel.grid.major = element_line(colour = "lightgray", linetype = "solid"),
panel.grid.minor = element_line(colour = "lightgray", linetype = "longdash"),
panel.border = element_rect(fill = NA, color = "black", size = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(fill = "white", color = "black", linewidth = 1.5, linetype = "solid"),
strip.text = element_text(size = 17, colour = "black",  family = "Times New Roman"),
axis.title.y = element_text(size = 20, family = "Times New Roman"),
axis.title.x = element_text(size = 20, family = "Times New Roman"),
axis.text.y = element_text(size = 9, colour = "black", family = "Times New Roman"),
axis.text.x = element_text(size = 10, colour = "black", family = "Times New Roman"),
legend.text = element_text(size = 15, family = "Times New Roman"),
legend.key.size = unit(1, "cm"),
legend.title = element_blank(),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_rect(fill = "white")))
(ratio <- ratio_data %>%
filter(log_DS > 0) %>%
ggplot(aes(x = reorder(Contaminants, log_DS), y = log_DS, fill = Classification))+
geom_hline(yintercept = 0, color = "red", size = 1.2)+
geom_boxplot()+
#facet_wrap(~Estuary, scales = "free_x", ncol =3)+
scale_fill_manual(values = class_palette)+
coord_flip()+
labs(x = element_blank(),
y = "Deep / surface Log concentration ratio")+
theme(aspect.ratio = 1.5,
panel.grid.major = element_line(colour = "lightgray", linetype = "solid"),
panel.grid.minor = element_line(colour = "lightgray", linetype = "longdash"),
panel.border = element_rect(fill = NA, color = "black", size = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(fill = "white", color = "black", linewidth = 1.5, linetype = "solid"),
strip.text = element_text(size = 17, colour = "black",  family = "Times New Roman"),
axis.title.y = element_text(size = 20, family = "Times New Roman"),
axis.title.x = element_text(size = 20, family = "Times New Roman"),
axis.text.y = element_text(size = 9, colour = "black", family = "Times New Roman"),
axis.text.x = element_text(size = 10, colour = "black", family = "Times New Roman"),
legend.text = element_text(size = 15, family = "Times New Roman"),
legend.key.size = unit(1, "cm"),
legend.title = element_blank(),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_rect(fill = "white")))
(ratio <- ratio_data %>%
filter(log_DS > 0) %>%
ggplot(aes(x = reorder(Contaminants, log_DS), y = log_DS, fill = Classification))+
geom_hline(yintercept = 0, color = "red", size = 1.2)+
geom_boxplot()+
#facet_wrap(~Estuary, scales = "free_x", ncol =3)+
scale_fill_manual(values = class_palette)+
coord_flip()+
labs(x = element_blank(),
y = "Deep / surface Log concentration ratio")+
theme(aspect.ratio = 1.5,
panel.grid.major = element_line(colour = "lightgray", linetype = "solid"),
panel.grid.minor = element_line(colour = "lightgray", linetype = "longdash"),
panel.border = element_rect(fill = NA, color = "black", size = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(fill = "white", color = "black", linewidth = 1.5, linetype = "solid"),
strip.text = element_text(size = 17, colour = "black",  family = "Times New Roman"),
axis.title.y = element_text(size = 20, family = "Times New Roman"),
axis.title.x = element_text(size = 20, family = "Times New Roman"),
axis.text.y = element_text(size = 9, colour = "black", family = "Times New Roman"),
axis.text.x = element_text(size = 10, colour = "black", family = "Times New Roman"),
legend.text = element_text(size = 15, family = "Times New Roman"),
legend.key.size = unit(1, "cm"),
legend.title = element_blank(),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_rect(fill = "white")))
(ratio <- ratio_data %>%
filter(DS_R > 0) %>%
ggplot(aes(x = reorder(Contaminants, DS_R), y = DS_R, fill = Classification))+
geom_hline(yintercept = 0, color = "red", size = 1.2)+
geom_boxplot()+
#facet_wrap(~Estuary, scales = "free_x", ncol =3)+
scale_fill_manual(values = class_palette)+
coord_flip()+
labs(x = element_blank(),
y = "Deep / surface Log concentration ratio")+
theme(aspect.ratio = 1.5,
panel.grid.major = element_line(colour = "lightgray", linetype = "solid"),
panel.grid.minor = element_line(colour = "lightgray", linetype = "longdash"),
panel.border = element_rect(fill = NA, color = "black", size = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(fill = "white", color = "black", linewidth = 1.5, linetype = "solid"),
strip.text = element_text(size = 17, colour = "black",  family = "Times New Roman"),
axis.title.y = element_text(size = 20, family = "Times New Roman"),
axis.title.x = element_text(size = 20, family = "Times New Roman"),
axis.text.y = element_text(size = 9, colour = "black", family = "Times New Roman"),
axis.text.x = element_text(size = 10, colour = "black", family = "Times New Roman"),
legend.text = element_text(size = 15, family = "Times New Roman"),
legend.key.size = unit(1, "cm"),
legend.title = element_blank(),
legend.position = "none",
legend.background = element_blank(),
legend.key = element_rect(fill = "white")))
library(openxlsx)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
library(ggthemes)
library(tidyverse)
library(ggpattern)
library(ggpubr)
library(ggpmisc)
library(hrbrthemes)
library(remotes)
library(purrr)
library(readxl)
library(stringr)
library(RSQLite)
library(data.table)
library(stringdist)
library(fst)
library(tcltk)
library(ECOTOXr)
GB <- read.xlsx("C:/Users/owner/OneDrive - huji.ac.il/PhD/reports/GreenBasine/CW_nabulus_raw.xlsx")
gb_p <- GB %>%
select(1, 4, 21:ncol(.)) %>%
mutate(across(3:ncol(.), ~as.numeric(.) %>% replace_na(0))) %>%
filter(rowSums(across(3:ncol(.))) > 0) %>%
pivot_longer(cols = 3:length(.), names_to = "PREFERRED_NAME", values_to = "Concentration") %>%
pivot_wider(names_from = c(1,2), values_from = Concentration)
NUKA <- read.fst("C:/Users/owner/Desktop/TaxoTox/Data/NUKA.fst") %>%
rename("CASRN" = CAS)
# DSSTox - database of over million pollutants, their names and IUPAC names (updating DB, needs to create a new table each time)
DSSTox <- read.fst("C:/Users/owner/Desktop/DSSTox.fst")
Internal_data <- gb_p # The user's data
Internal_data <- gb_p # The user's data
# Convert to data.table for more efficient operations
setDT(NUKA)
setDT(DSSTox)
setDT(Internal_data)
p_vector <- Internal_data[[1]] # Create a vector of compounds from the user's data for CAS search
## First search - NUKA (exact matches)
internal_list <- NUKA[NUKA$PREFERRED_NAME %in% p_vector, ]
p_vector_found <- internal_list$PREFERRED_NAME # Creating a vector of all pollutants that were found
unfound <- p_vector[!p_vector %in% p_vector_found] # Saving the pollutants that weren't found in NUKA for further search in DSSTox
# Create a data.table for unfounded pollutants for easier manipulation
unfound_dt <- data.table(PREFERRED_NAME = unfound)
# Second search - DSSTox (fuzzy)
# Interactive fuzzy matching function
fuzzy_match_interactive <- function(source_names, target_dt, match_col, threshold = 0.05, confirm_threshold = 0.01) {
result <- data.table(
source_name = source_names,
matched_name = NA_character_,
distance = NA_real_,
confirmed = FALSE
)
for (i in 1:length(source_names)) {
name <- source_names[i]
if (is.na(name)) {
next
}
valid_targets <- target_dt[[match_col]][!is.na(target_dt[[match_col]])] # Calculate distances to all target names (excluding NA targets)
if (length(valid_targets) == 0) { # Handle case where there are no valid targets
next
}
distances <- stringdist(name, valid_targets, method = "jw")
if (length(distances) > 0 && !all(is.na(distances))) { # Find the best match if any valid distances exist
min_dist <- min(distances, na.rm = TRUE)
best_idx <- which.min(distances)
best_match <- valid_targets[best_idx]
match_quality <- round((1 - min_dist) * 100, 1)
if (!is.na(min_dist) && min_dist <= threshold) {  # Get CASRN number for the matched compound
casrn_number <- target_dt[get(match_col) == best_match, CASRN]
casrn_display <- if(length(casrn_number) > 0 && !is.na(casrn_number[1])) casrn_number[1] else "Not available"
if (match_quality == 100) { # Auto-accept perfect matches
confirmed <- TRUE
} else if (match_quality >= threshold) { # Show message box for high confidence matches (95% and above, but not 100%)
message_text <- paste0(
"Match found:\n\n",
"Source compound:  ", name, "\n",
"Matched compound: ", best_match, "\n",
"CASRN number: ", casrn_display, "\n",
"Match confidence: ", match_quality, "%\n\n",
"Do you want to accept this match?"
)
answer <- tcltk::tkmessageBox( # Display message box with consistent format
title = paste0("Compound Match (", match_quality, "% confidence)"),
message = message_text,
icon = "question",
type = "yesno"
)
confirmed <- as.character(answer) == "yes"
} else {
confirmed <- FALSE
}
if (confirmed) {
result[i, `:=`(
matched_name = best_match,
distance = min_dist,
confirmed = TRUE
)]
}
}
}
}
return(result)
}
# Run the interactive matching
matches <- fuzzy_match_interactive(
unfound,
DSSTox,
"PREFERRED_NAME",
threshold = 0.1,      # Maximum allowed distance - needs to be defind by the user?
confirm_threshold = 0  # Auto-accept
)
# Create final result data.table with CASRN numbers
# First, get the CASRN numbers for exact matches from NUKA
exact_matches <- NUKA[PREFERRED_NAME %in% p_vector_found, .(PREFERRED_NAME, CASRN)]
# Then get CASRN numbers for fuzzy matches from DSSTox
fuzzy_confirmed <- matches[confirmed == TRUE]
fuzzy_matches <- DSSTox[DSSTox$PREFERRED_NAME %in% fuzzy_confirmed$matched_name,
.(PREFERRED_NAME, CASRN)]
# Map the original names to the matched DSSTox names to get CASRN numbers
fuzzy_results <- merge(
fuzzy_confirmed[, .(source_name, matched_name)],
fuzzy_matches,
by.x = "matched_name",
by.y = "PREFERRED_NAME",
all.x = TRUE
)
# Rename columns for consistency
setnames(fuzzy_results, "source_name", "PREFERRED_NAME")
# Combine exact and fuzzy matches
final_search_results <- rbindlist(
list(
exact_matches,
fuzzy_results[, .(PREFERRED_NAME, CASRN)]
),
use.names = TRUE,
fill = TRUE
)
#search CARSN result:
percentage_found <- round((nrow(final_search_results) * 100 / length(p_vector)), 1)
#information about first stage- how many found and not found in exact search from NUKA
print(paste("Number of compounds found in NUKA:", length(p_vector_found), "out of", length(p_vector)))
# Count confirmed matches
match_count <- sum(matches$confirmed, na.rm = TRUE)
print(paste("Number of confirmed fuzzy matches (exact match from DSSTox):", match_count))
# Count unexact matches (matches accepted through message box, excluding 100% matches)
unexact_matches <- sum(matches$confirmed == TRUE & matches$distance > 0, na.rm = TRUE)
print(paste("Number of unexact matches accepted by user:", unexact_matches))
print(paste("Total pollutants with CASRN numbers:", nrow(final_search_results), "out of", length(p_vector), "(",percentage_found,"%)"))
all_p_df <- data.frame(
PREFERRED_NAME = p_vector,
CASRN = NA,
stringsAsFactors = FALSE
)
# Combine and remove duplicates, keeping original CASRN values when they exist
manual_fill_df <- bind_rows(final_search_results, all_p_df) %>%
group_by(PREFERRED_NAME) %>%
summarise(CASRN = ifelse(any(!is.na(CASRN) & CASRN != ""),
first(CASRN[!is.na(CASRN) & CASRN != ""]),
""),
.groups = 'drop')
#write.csv(manual_fill_df, "manual_fill.csv") #fill
all_cas <- read_csv("../Data/manual_fill.csv") # the ".." - route the path to one directory level higher
#R TO SQL
conn <- dbConnect(RSQLite::SQLite(), "C:/Users/owner/AppData/Local/ECOTOXr/ECOTOXr/Cache/ecotox_ascii_03_13_2025.sqlite")
#A list of Ecotox organisms groups:
mysearch <- paste0("SELECT DISTINCT ecotox_group
FROM species
ORDER BY ecotox_group;")
unique_ecotox_group <- dbGetQuery(conn, mysearch)
p_final <- as.vector(all_cas$CASRN) %>%  #save as vector- without "-" (as appear in ecotox)
gsub("-", "", .)
# Convert the vector to a comma-separated string for the SQL IN clause
cas_list <- paste0("'", p_final, "'", collapse = ", ")
mysearch <- paste0("SELECT
r.result_id,
r.endpoint,
r.trend,
r.effect,
r.measurement,
r.measurement_comments,
r.response_site,
r.response_site_comments,
r.conc1_type,
r.conc1_mean_op,
r.conc1_mean,
r.conc1_min_op,
r.conc1_min,
r.conc1_max_op,
r.conc1_max,
r.conc1_unit,
r.conc1_comments,
r.conc2_type,
r.conc2_mean_op,
r.conc2_mean,
r.conc2_min,
r.conc2_max_op,
r.conc2_max,
r.conc2_unit,
r.conc3_type,
r.conc3_mean_op,
r.conc3_mean,
r.conc3_min_op,
r.conc3_min,
r.conc3_max_op,
r.conc3_max,
r.conc3_unit,
r.conc3_comments,
t.test_id,
t.reference_number,
t.test_cas,
s.species,
s.ecotox_group,
c.chemical_name
FROM results r
JOIN tests t ON r.test_id = t.test_id
JOIN species s ON t.species_number = s.species_number
JOIN chemicals c ON t.test_cas = c.cas_number
WHERE s.ecotox_group IN ('FishStandard Test Species', 'CrustaceansStandard Test Species', 'AlgaeStandard Test Species');")
filterd_ecotox_data <-dbGetQuery(conn, mysearch) %>%
mutate(across(contains("conc") & !c(ends_with("unit")|ends_with("op")|ends_with("type")|ends_with("comments")), as.numeric))
count(unique(filterd_ecotox_data$reference_number))
unique(filterd_ecotox_data$reference_number)
n_distinct(filterd_ecotox_data$reference_number)
View(filterd_ecotox_data)
n_distinct(filterd_ecotox_data$chemical_name)
filterd_ecotox_data_conc_unit <- filterd_ecotox_data %>%
mutate(
conc1_unit = str_remove(conc1_unit, c("^AI\\s*")),
conc1_unit = str_replace_all(conc1_unit, "\\bdm3\\b", "L"),
conc1_unit = str_replace_all(conc1_unit, "ppt", "ng/L"),
conc1_unit = str_replace_all(conc1_unit, "ppm", "mg/L"),
conc1_unit = str_replace_all(conc1_unit, "ppb", "ug/L"),
conc1_unit = str_replace_all(conc1_unit, "0/00", "g/L")
) %>%
filter(
!str_detect(conc1_unit, regex("%|mol|M|Bq|dpm|ML|NR|cpm|fibers|acre|Ci|egg|fish|ha|org|d|kg|ppmv|ppmw|injection|cell|IU")), # remove unwanted units
str_count(conc1_unit, "\\s+") == 0,  # keep 1-word units (removes bdwt, diet, protein and other unwanted units)
) %>%
group_by(conc1_unit) %>%
summarise(n = n(), .groups = "drop")
final_ecotox_data <- filterd_ecotox_data %>%
mutate(conc = case_when(
!is.na(conc1_mean) ~ conc1_mean,
is.na(conc1_mean) & !is.na(conc1_min) & !is.na(conc1_max) ~ (conc1_min + conc1_max) / 2,
!is.na(conc1_min) ~ conc1_min,
!is.na(conc1_max) ~ conc1_max,
TRUE ~ NA_real_
)) %>%
mutate(
conc1_unit = str_remove(conc1_unit, "^AI\\s*"),
conc1_unit = str_replace_all(conc1_unit, "\\bdm3\\b", "L"),
conc1_unit = str_replace_all(conc1_unit, "ppt", "ng/L"),
conc1_unit = str_replace_all(conc1_unit, "ppm", "mg/L"),
conc1_unit = str_replace_all(conc1_unit, "ppb", "ug/L"),
conc1_unit = str_replace_all(conc1_unit, "0/00", "g/L")
) %>%
filter(
!str_detect(conc1_unit, regex("%|mol|M|Bq|dpm|ML|NR|cpm|fibers|acre|Ci|egg|fish|ha|org|d|kg|ppmv|ppmw|injection|cell|IU")),
str_count(conc1_unit, "\\s+") == 0
) %>%
filter(conc1_unit %in% relevent_conc) %>%
left_join(conversion_df, by = "conc1_unit") %>%
mutate(conc_ng_L = conc * factor_to_ng_L) %>%
select(-starts_with("conc"), conc_ng_L)
relevent_conc <- c("ng/L", "mg/L", "ug/L")
conversion_df <- tibble(
conc1_unit = c("ng/L", "mg/L", "ug/L"),
factor_to_ng_L = c(1, 1e6, 1e3)
)
final_ecotox_data <- filterd_ecotox_data %>%
mutate(conc = case_when(
!is.na(conc1_mean) ~ conc1_mean,
is.na(conc1_mean) & !is.na(conc1_min) & !is.na(conc1_max) ~ (conc1_min + conc1_max) / 2,
!is.na(conc1_min) ~ conc1_min,
!is.na(conc1_max) ~ conc1_max,
TRUE ~ NA_real_
)) %>%
mutate(
conc1_unit = str_remove(conc1_unit, "^AI\\s*"),
conc1_unit = str_replace_all(conc1_unit, "\\bdm3\\b", "L"),
conc1_unit = str_replace_all(conc1_unit, "ppt", "ng/L"),
conc1_unit = str_replace_all(conc1_unit, "ppm", "mg/L"),
conc1_unit = str_replace_all(conc1_unit, "ppb", "ug/L"),
conc1_unit = str_replace_all(conc1_unit, "0/00", "g/L")
) %>%
filter(
!str_detect(conc1_unit, regex("%|mol|M|Bq|dpm|ML|NR|cpm|fibers|acre|Ci|egg|fish|ha|org|d|kg|ppmv|ppmw|injection|cell|IU")),
str_count(conc1_unit, "\\s+") == 0
) %>%
filter(conc1_unit %in% relevent_conc) %>%
left_join(conversion_df, by = "conc1_unit") %>%
mutate(conc_ng_L = conc * factor_to_ng_L) %>%
select(-starts_with("conc"), conc_ng_L)
length(unique(final_ecotox_data$chemical_name))
n_distinct(final_ecotox_data$chemical_name)
n_distinct(final_ecotox_data$reference_number)
n_distinct(final_ecotox_data$species)
n_distinct(filterd_ecotox_data_conc_unit$species)
n_distinct(filterd_ecotox_data$species)
relevent_endpoints <- c("EC50", "ED50", "LC50")
ec50 <- final_ecotox_data %>%
filter(endpoint == "EC50")
View(final_ecotox_data)
colna
colnames(final_ecotox_data)
ec50 <- final_ecotox_data %>%
filter((endpoint == "EC50" & measurement == "MORT")&(endpoint == "ED50" & measurement == "MORT")&(effect == "LC50"))
ec50 <- final_ecotox_data %>%
filter((endpoint == "EC50" & measurement == "MORT"))
ec50 <- final_ecotox_data %>%
filter((endpoint == "EC50" & measurement == "MORT")|(endpoint == "ED50" & measurement == "MORT")|(effect == "LC50"))
View(ec50)
n_distinct(ec50$chemical_name)
n_distinct(ec50$reference_number)
n_distinct(ec50$species)
ec50 <- final_ecotox_data %>%
fulter(endpoint %in% relevent_endpoints)
ec50 <- final_ecotox_data %>%
filter(endpoint %in% relevent_endpoints)
View(ec50)
algae <- ec50 %>%
filter(ecotox_group == "AlgaeStandard Test Species")
length(algae(ec50$chemical_name))
length(unique(algae$chemical_name))
length(unique(algae$endpoint))
length(unique(algae$reference_number))
length(unique(algae$species))
View(algae)
crustaceans <- filterd_ecotox_data %>%
filter(ecotox_group == "CrustaceansStandard Test Species")
length(unique(algae$chemical_name))
length(unique(algae$reference_number))
length(unique(algae$species))
View(algae)
length(unique(crustaceans$chemical_name))
length(unique(crustaceans$reference_number))
length(unique(crustaceans$species))
fish <- filterd_ecotox_data %>%
filter(ecotox_group== "FishStandard Test Species")
length(unique(fish$chemical_name))
length(unique(fish$reference_number))
length(unique(fish$species))
